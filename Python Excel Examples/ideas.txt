Creating a GitHub Repository for Python Excel Examples
1. Repository Creation and Setup
Create a new repository: On GitHub, click "New repository" and provide a name (e.g., "python-excel-examples").
Add a README.md file: This file will serve as a description of your repository.
Initialize a Git repository: If you haven't already, initialize a Git repository in your local directory.
Add and commit files: Add your initial files (e.g., README.md) and commit them to the repository.
Push to remote: Push your local repository to the remote GitHub repository.
2. Example 1: Basic Data Manipulation
import pandas as pd

# Load the data from an Excel file
df = pd.read_excel('sales_data.xlsx')

# Perform basic data manipulation
df['Total Sales'] = df['Quantity'] * df['Price']
df['Profit Margin'] = (df['Price'] - df['Cost']) / df['Price']

# Save the modified data to a new Excel file
df.to_excel('modified_data.xlsx', index=False)


3. Example 2: Data Visualization
import pandas as pd
import matplotlib.pyplot as plt

# Load the data
df = pd.read_excel('sales_data.xlsx')

# Create a bar chart
plt.bar(df['Product'], df['Sales'])
plt.xlabel('Product')
plt.ylabel('Sales')
plt.title('Product Sales')
plt.show()


4. Example 3: Pivot Tables
import pandas as pd

# Load the data
df = pd.read_excel('sales_data.xlsx')

# Create a pivot table
pivot_table = df.pivot_table(index='Product', columns='Region', values='Sales', aggfunc='sum')

# Print the pivot table
print(pivot_table)


5. Example 4: Working with Multiple Sheets
import openpyxl

# Load the workbook
wb = openpyxl.load_workbook('data.xlsx')

# Access a specific sheet
sheet1 = wb['Sheet1']
sheet2 = wb['Sheet2']

# Read and write data from/to the sheets
cell_value = sheet1['A1'].value
sheet2['B2'] = 'New value'

# Save the modified workbook
wb.save('modified_data.xlsx')


6. Example 5: Advanced Data Cleaning
import pandas as pd

# Load the data
df = pd.read_excel('raw_data.xlsx')

# Handle missing values
df.fillna(0, inplace=True)

# Remove outliers
df = df[df['Sales'] < df['Sales'].quantile(0.95)]

# Convert data types
df['Date'] = pd.to_datetime(df['Date'])

# Save the cleaned data
df.to_excel('cleaned_data.xlsx', index=False)


7. Example 6: Custom Functions and Modules
import pandas as pd

def calculate_sales_growth(df):
    df['Sales Growth'] = (df['Sales'].shift(-1) - df['Sales']) / df['Sales']
    return df

# Load the data
df = pd.read_excel('sales_data.xlsx')

# Apply the custom function
df = calculate_sales_growth(df)

# Save the modified data
df.to_excel('modified_data.xlsx', index=False)


Additional Tips
Use meaningful file and function names.
Add comments to explain your code.
Consider using version control to track changes.
Test your code thoroughly.
Share your repository with others.
By following these guidelines and incorporating these examples, you can create a valuable resource for others who are learning to work with Excel files in Python.
